import { AzureFunction, BindingDefinition as BaseBindingDefinition, Context, ContextBindings } from '@azure/functions';
interface QueueBindingDefinition extends BaseBindingDefinition {
    queueName: string;
    connection: string;
}
interface TableBindingDefinition extends BaseBindingDefinition {
    tableName: string;
    partitionKey?: string;
    rowKey?: string;
    take?: number;
    filter?: string;
    connection: string;
}
export type BindingDefinition = QueueBindingDefinition | TableBindingDefinition | BaseBindingDefinition;
export interface FunctionJson {
    disabled?: boolean;
    excluded?: boolean;
    scriptFile?: string;
    entryPoint?: string;
    retry?: {
        strategy?: 'exponentialBackoff' | 'fixedDelay';
        maxRetryCount?: number;
        delayInterval?: string;
        minimumInterval?: string;
        maximumInterval?: string;
    };
    bindings: BindingDefinition[];
}
export declare function createContextForFunction(azFunction: AzureFunction, bindingDefinitions: BindingDefinition[] | string, bindingData: Record<string, ContextBindings>, resolver: (err: null | Error, result?: any) => void): Context;
export {};
//# sourceMappingURL=context-builder.d.ts.map